// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  name String?
  email String @unique
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken String? @unique
  cart Cart?
  addresses Address[]
  orders Order[]
  
  chats Chat[] @relation("UserChats")
  superAdminChats Chat[] @relation("SuperAdminChats")
  sentMessages ChatMessage[] @relation("SentMessages")

}

model product{
  id String @id @default(cuid())
  name String
  brand String
  description String
  category String
  gender String
  sizes String[]
  colors String[]
  price Float
  stock Int
  soldCount Int
  rating Float?
  images String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isFeatured Boolean @default(false)
}

model Cart{
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  items CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem{
  id String @id @default(cuid())
  cartId String 
  cart Cart @relation(fields: [cartId], references: [id])
  productId String
  quantity Int
  size String?
  color String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, size, color])
}

model FeatureBanner {
  id       String   @id @default(cuid())
  imageUrl    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address{
  id String @id @default(cuid())
  userId String 
  user User @relation(fields: [userId], references: [id])
  name String
  phone String
  address String
  province String
  city String
  subdistrict String
  postcode String
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]

  @@index([userId])
}

model Order{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  addressId String
  address Address @relation(fields: [addressId], references: [id])
  items OrderItem[]
  total Float
  status OrderStatus @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([addressId])
}

model OrderItem{
  id String @id @default(cuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  productName String
  productCategory String
  quantity Int
  size String?
  color String?
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Chat {
  id String @id @default(cuid())
  userId String
  user User @relation("UserChats", fields: [userId], references: [id])
  superAdminId String
  superAdmin User @relation("SuperAdminChats", fields: [superAdminId], references: [id])
  messages ChatMessage[]
  isActive Boolean @default(true)
  lastMessageAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, superAdminId])
  @@index([userId])
  @@index([superAdminId])
}

model ChatMessage {
  id String @id @default(cuid())
  chatId String
  chat Chat @relation(fields: [chatId], references: [id])
  senderId String
  sender User @relation("SentMessages", fields: [senderId], references: [id])
  content String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
  @@index([senderId])
}

enum Role{
  USER
  SUPER_ADMIN
}

enum OrderStatus{
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CREDIT_CARD
  TRANSFER
  GOPAY
  QRIS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
